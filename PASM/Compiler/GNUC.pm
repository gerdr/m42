use v6;
use PASM::Compiler;
class PASM::Compiler::GNUC does PASM::Compiler;

my %typemap =
	'ptr' => 'void*',
	'i64' => 'uint64_t',
	'f64' => 'double'
;

method dump {
	print '// generated by PASM::Compiler::GNUC

#include <stddef.h>
#include <stdint.h>
';

	for %.chunks.values {
		my @statements := gather {
			for .<regs>.values {
				my $type = .<type>;
				die "unsupported register type $type"
					unless $type ~~ %typemap;

				take "register { %typemap{.<type>} } r_{ .<name> };";
			}

			for .<code>.list {
				my $type = .key;
				given $type {
					when 'op' {}
					when 'label' {}
					default {
						die "unsupported code type $type"
					}
				}
			}
		}

		my @args = [];

		print "
void { .<name> }({ @args.join(', ') || 'void' })
\{
	{ @statements.join("\n\t") }
}
";
	}
}
